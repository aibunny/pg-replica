services:
  master_psql:
    image: postgres:latest
    container_name: master_psql
    restart: always
    env_file:
      - .env
    environment:
      POSTGRES_USER: "${MASTER_USER}"
      POSTGRES_PASSWORD: "${MASTER_PASSWORD}"
      POSTGRES_HOST_AUTH_METHOD: "scram-sha-256\nhost replication replicator 0.0.0.0/0 trust"
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    ports:
      - "${MASTER_PORT}:5432"
    command: |
      postgres
      -c wal_level=replica
      -c hot_standby=on
      -c max_wal_senders=15
      -c max_replication_slots=10
      -c hot_standby_feedback=on
      -c archive_mode=on
      -c archive_command='sudo pgbackrest --stanza=aibunny archive-push %p'
      -c wal_log_hints=on
    volumes:
      - pgdata:/var/lib/postgresql/data #Data Volume
      - pgbackrest_backup:/var/lib/pgbackrest/backups #Data Volume
      - ./init/:/docker-entrypoint-initdb.d
      - ./files/pgbackrest.conf:/etc/pgbackrest/pgbackrest.conf #update file add s3 bucket settings
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready" ]
      interval: 10s
      timeout: 5s


  pg_pooler:
    container_name: pg_pooler
    image: ghcr.io/postgresml/pgcat:latest
    restart: always
    command: >
      pgcat /etc/pgcat/pgcat.toml
    ports:
      - "6432:6432"
      - "9930:9930"
    depends_on:
      master_psql:
        condition: service_healthy
    volumes:
      - cache:/data
      - ./files/pgcat.toml:/etc/pgcat/pgcat.toml


volumes:
  pgdata:
    driver: local
  cache:
    driver: local
  pgbackrest_backup:
    driver: local





